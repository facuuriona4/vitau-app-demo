{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useQuery } from \"react-query\";\nimport axios from \"axios\";\n\nvar getUsers = function getUsers() {\n  var _await$axios$get, data;\n\n  return _regeneratorRuntime.async(function getUsers$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.get(\"https://rickandmortyapi.com/api/character\"));\n\n        case 2:\n          _await$axios$get = _context.sent;\n          data = _await$axios$get.data;\n          return _context.abrupt(\"return\", data);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default function useUsers() {\n  return useQuery(\"characters\", getUsers);\n}","map":{"version":3,"sources":["/home/facundo/vitau-app-demo/src/particles/requests/users/queries/useUsers.ts"],"names":["useQuery","axios","getUsers","get","data","useUsers"],"mappings":";AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAsBA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACyBD,KAAK,CAACE,GAAN,CACtC,2CADsC,CADzB;;AAAA;AAAA;AACPC,UAAAA,IADO,oBACPA,IADO;AAAA,2CAIRA,IAJQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;AAOA,eAAe,SAASC,QAAT,GAAoB;AACjC,SAAOL,QAAQ,CAAC,YAAD,EAAeE,QAAf,CAAf;AACD","sourcesContent":["import { useQuery } from \"react-query\";\nimport axios from \"axios\";\n\ninterface Users {\n  info: {\n    count: number;\n    next: string;\n    pages: string;\n    prev: number | null;\n  };\n  results: {\n    created: Date;\n    episode: number[];\n    gender: string;\n    id: number;\n    image: string;\n    url: string;\n    name: string;\n    species: string;\n    origin: { name: string; url: string };\n  }[];\n}\n\nconst getUsers = async () => {\n  const { data }: { data: Users } = await axios.get(\n    \"https://rickandmortyapi.com/api/character\"\n  );\n  return data;\n};\n\nexport default function useUsers() {\n  return useQuery(\"characters\", getUsers);\n}\n"]},"metadata":{},"sourceType":"module"}