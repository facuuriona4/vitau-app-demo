{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport create from \"zustand\";\nimport { initialClientState } from \"./clientStore.state\";\nimport reducer from \"./clientStore.reducer\";\nexport var useStore = create(function (set) {\n  return _objectSpread(_objectSpread({}, initialClientState), {}, {\n    dispatch: function dispatch(args) {\n      return set(function (state) {\n        return reducer(state, args);\n      });\n    }\n  });\n});","map":{"version":3,"sources":["/home/facundo/vitau-app-demo/src/particles/clientStore/index.ts"],"names":["create","initialClientState","reducer","useStore","set","dispatch","args","state"],"mappings":";;;;;;AACA,OAAOA,MAAP,MAA4C,SAA5C;AAGA,SAAsBC,kBAAtB;AACA,OAAOC,OAAP;AAUA,OAAO,IAAMC,QAAQ,GAAGH,MAAM,CAAoB,UAAAI,GAAG;AAAA,yCACjDH,kBADiD;AAEpDI,IAAAA,QAAQ,EAAE,kBAACC,IAAD;AAAA,aAAmBF,GAAG,CAAC,UAACG,KAAD;AAAA,eAAWL,OAAO,CAACK,KAAD,EAAQD,IAAR,CAAlB;AAAA,OAAD,CAAtB;AAAA;AAF0C;AAAA,CAAvB,CAAvB","sourcesContent":["\nimport create, { State, StateCreator } from \"zustand\";\nimport { Actions } from \"./clientStore.actions\";\nimport { ClientDispatch } from \"./clientStore.dispatch\";\nimport { ClientState, initialClientState } from \"./clientStore.state\";\nimport reducer from \"./clientStore.reducer\";\n\n\n/*\nconst immer = <T extends State>(\n  config: StateCreator<T, (fn: (draft: T) => void) => void>\n): StateCreator<T> => (set, get, api) =>\n  config((fn) => set(produce(fn) as (state: T) => T), get, api);\n*/\n\nexport const useStore = create<ClientState & any>(set => ({\n\t...initialClientState,\n\tdispatch: (args: Actions) => set((state) => reducer(state, args)),\n}))"]},"metadata":{},"sourceType":"module"}